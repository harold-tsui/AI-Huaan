# BASB 系统 Docker Compose 配置文件
# 文件路径: docker-compose.yml

version: '3.8'

services:
  # 数据库服务
  mongodb:
    image: mongo:5.0
    container_name: basb-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-basb_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-basb_password}
      MONGO_INITDB_DATABASE: basb
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')", "-u", "${MONGO_USERNAME:-basb_user}", "-p", "${MONGO_PASSWORD:-basb_password}", "--authenticationDatabase", "admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  redis:
    image: redis:6.2
    container_name: basb-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-basb_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-basb_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # API 服务
  api:
    image: basb/api:${TAG:-latest}
    container_name: basb-api
    restart: always
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_USERNAME:-basb_user}:${MONGO_PASSWORD:-basb_password}@mongodb:27017/basb?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD:-basb_redis_password}@redis:6379/0
      KNOWLEDGE_GRAPH_URL: http://knowledge-graph:3001
      DOCUMENT_PROCESSOR_URL: http://document-processor:3002
      SEARCH_URL: http://search:3003
      AI_URL: http://ai:3004
      LOG_LEVEL: ${LOG_LEVEL:-info}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # 知识图谱服务
  knowledge-graph:
    image: basb/knowledge-graph:${TAG:-latest}
    container_name: basb-knowledge-graph
    restart: always
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_USERNAME:-basb_user}:${MONGO_PASSWORD:-basb_password}@mongodb:27017/basb?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD:-basb_redis_password}@redis:6379/1
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${KNOWLEDGE_GRAPH_PORT:-3001}:3001"
    volumes:
      - knowledge_graph_logs:/app/logs
      - knowledge_graph_data:/app/data
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # 文档处理服务
  document-processor:
    image: basb/document-processor:${TAG:-latest}
    container_name: basb-document-processor
    restart: always
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      MONGODB_URI: mongodb://${MONGO_USERNAME:-basb_user}:${MONGO_PASSWORD:-basb_password}@mongodb:27017/basb?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD:-basb_redis_password}@redis:6379/2
      KNOWLEDGE_GRAPH_URL: http://knowledge-graph:3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${DOCUMENT_PROCESSOR_PORT:-3002}:3002"
    volumes:
      - document_processor_logs:/app/logs
      - document_processor_data:/app/data
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # 搜索服务
  search:
    image: basb/search:${TAG:-latest}
    container_name: basb-search
    restart: always
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3003
      MONGODB_URI: mongodb://${MONGO_USERNAME:-basb_user}:${MONGO_PASSWORD:-basb_password}@mongodb:27017/basb?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD:-basb_redis_password}@redis:6379/3
      KNOWLEDGE_GRAPH_URL: http://knowledge-graph:3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${SEARCH_PORT:-3003}:3003"
    volumes:
      - search_logs:/app/logs
      - search_data:/app/data
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # AI 服务
  ai:
    image: basb/ai:${TAG:-latest}
    container_name: basb-ai
    restart: always
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3004
      MONGODB_URI: mongodb://${MONGO_USERNAME:-basb_user}:${MONGO_PASSWORD:-basb_password}@mongodb:27017/basb?authSource=admin
      REDIS_URI: redis://:${REDIS_PASSWORD:-basb_redis_password}@redis:6379/4
      KNOWLEDGE_GRAPH_URL: http://knowledge-graph:3001
      SEARCH_URL: http://search:3003
      LOG_LEVEL: ${LOG_LEVEL:-info}
      AI_MODEL_PATH: /app/models
      AI_API_KEY: ${AI_API_KEY:-your_ai_api_key}
    ports:
      - "${AI_PORT:-3004}:3004"
    volumes:
      - ai_logs:/app/logs
      - ai_models:/app/models
      - ai_data:/app/data
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # 监控服务
  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: basb-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - basb-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:9.0.0
    container_name: basb-grafana
    restart: always
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 日志聚合服务
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: basb-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: basb-kibana
    restart: always
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    container_name: basb-filebeat
    restart: always
    user: root
    depends_on:
      - elasticsearch
      - kibana
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - api_logs:/logs/api:ro
      - knowledge_graph_logs:/logs/knowledge-graph:ro
      - document_processor_logs:/logs/document-processor:ro
      - search_logs:/logs/search:ro
      - ai_logs:/logs/ai:ro
    networks:
      - basb-network
    command: ["--strict.perms=false"]

  # 告警服务
  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: basb-alertmanager
    restart: always
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    networks:
      - basb-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 反向代理
  nginx:
    image: nginx:1.21
    container_name: basb-nginx
    restart: always
    depends_on:
      - api
      - knowledge-graph
      - document-processor
      - search
      - ai
      - grafana
      - kibana
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - basb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  basb-network:
    driver: bridge

volumes:
  # 数据库卷
  mongodb_data:
  redis_data:
  
  # 应用卷
  api_logs:
  api_uploads:
  knowledge_graph_logs:
  knowledge_graph_data:
  document_processor_logs:
  document_processor_data:
  search_logs:
  search_data:
  ai_logs:
  ai_models:
  ai_data:
  
  # 监控卷
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  alertmanager_data:
  nginx_logs: