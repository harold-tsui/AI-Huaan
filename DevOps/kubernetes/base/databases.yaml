# MongoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  labels:
    app: mongodb
    component: database
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: basb-secrets
              key: MONGODB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: basb-secrets
              key: MONGODB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "basb"
        resources:
          limits:
            cpu: "2"
            memory: "4Gi"
          requests:
            cpu: "1"
            memory: "2Gi"
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /docker-entrypoint-initdb.d
      - name: mongodb-exporter
        image: percona/mongodb_exporter:0.32
        ports:
        - containerPort: 9216
          name: metrics
        env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: basb-secrets
              key: MONGODB_EXPORTER_URI
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-init
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
      storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
    component: database
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: mongodb
    name: mongodb
  - port: 9216
    targetPort: metrics
    name: metrics
  clusterIP: None
---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
    component: database
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      containers:
      - name: redis
        image: redis:7.0
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: basb-secrets
              key: REDIS_PASSWORD
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.44.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: basb-secrets
              key: REDIS_PASSWORD
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
      storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
    component: database
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: redis
    name: redis
  - port: 9121
    targetPort: metrics
    name: metrics
  clusterIP: None
---
# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
data:
  init-mongo.js: |
    db = db.getSiblingDB('basb');
    
    // 创建用户
    db.createUser({
      user: 'basb_user',
      pwd: process.env.MONGO_INITDB_ROOT_PASSWORD,
      roles: [{ role: 'readWrite', db: 'basb' }]
    });
    
    // 创建集合
    db.createCollection('users');
    db.createCollection('notes');
    db.createCollection('tags');
    db.createCollection('projects');
    db.createCollection('references');
    db.createCollection('knowledge_nodes');
    db.createCollection('knowledge_links');
    db.createCollection('documents');
    db.createCollection('search_index');
    db.createCollection('ai_models');
    db.createCollection('system_logs');
    db.createCollection('audit_logs');
    db.createCollection('system_config');
    
    // 创建索引
    db.users.createIndex({ "email": 1 }, { unique: true });
    db.users.createIndex({ "username": 1 }, { unique: true });
    db.notes.createIndex({ "user_id": 1, "created_at": -1 });
    db.notes.createIndex({ "tags": 1 });
    db.tags.createIndex({ "user_id": 1, "name": 1 }, { unique: true });
    db.projects.createIndex({ "user_id": 1, "name": 1 }, { unique: true });
    db.knowledge_nodes.createIndex({ "user_id": 1 });
    db.knowledge_nodes.createIndex({ "tags": 1 });
    db.knowledge_links.createIndex({ "source_id": 1 });
    db.knowledge_links.createIndex({ "target_id": 1 });
    db.documents.createIndex({ "user_id": 1, "filename": 1 });
    db.search_index.createIndex({ "content": "text" });
    db.system_logs.createIndex({ "timestamp": 1 });
    db.system_logs.createIndex({ "timestamp": 1 }, { expireAfterSeconds: 2592000 }); // 30天后过期
    
    // 插入初始管理员用户
    db.users.insertOne({
      username: 'admin',
      email: 'admin@basb-system.com',
      password: '$2b$10$rGxOWLZT7/3rHgEo3vwH9eOUoXK3HOYKVQYgBMOK1XRUFP5w8wkZa', // 'admin123'
      role: 'admin',
      created_at: new Date(),
      updated_at: new Date()
    });
    
    // 插入系统配置
    db.system_config.insertOne({
      key: 'system_version',
      value: '1.0.0',
      updated_at: new Date()
    });
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis.conf: |
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    always-show-logo yes
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    requirepass ${REDIS_PASSWORD}
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes