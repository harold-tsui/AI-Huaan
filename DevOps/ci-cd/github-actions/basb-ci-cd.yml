name: BASB CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint
      - name: Run type checking
        run: npm run type-check

  # 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test:unit
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: coverage/

  # 集成测试
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run integration tests
        run: npm run test:integration
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-coverage
          path: coverage/

  # 构建 Docker 镜像
  build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: basb/api-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      - name: Build and push API service
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=basb/api-service:buildcache
          cache-to: type=registry,ref=basb/api-service:buildcache,mode=max
      # 重复类似步骤构建其他服务镜像
      # 知识图谱服务
      - name: Build and push Knowledge Graph service
        uses: docker/build-push-action@v4
        with:
          context: ./services/knowledge-graph
          file: ./services/knowledge-graph/Dockerfile
          push: true
          tags: basb/knowledge-graph:${{ github.sha }}
      # 文档处理服务
      - name: Build and push Document Processing service
        uses: docker/build-push-action@v4
        with:
          context: ./services/document-processing
          file: ./services/document-processing/Dockerfile
          push: true
          tags: basb/document-processing:${{ github.sha }}
      # 搜索服务
      - name: Build and push Search service
        uses: docker/build-push-action@v4
        with:
          context: ./services/search
          file: ./services/search/Dockerfile
          push: true
          tags: basb/search:${{ github.sha }}
      # AI 服务
      - name: Build and push AI service
        uses: docker/build-push-action@v4
        with:
          context: ./services/ai
          file: ./services/ai/Dockerfile
          push: true
          tags: basb/ai:${{ github.sha }}

  # 部署到 Staging 环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.basb-system.com
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name basb-staging-cluster --region us-west-2
      - name: Deploy to Staging
        run: |
          # 更新 Kubernetes 部署配置中的镜像标签
          kubectl set image deployment/api-service api-service=basb/api-service:${{ github.sha }} -n basb-staging
          kubectl set image deployment/knowledge-graph knowledge-graph=basb/knowledge-graph:${{ github.sha }} -n basb-staging
          kubectl set image deployment/document-processing document-processing=basb/document-processing:${{ github.sha }} -n basb-staging
          kubectl set image deployment/search search=basb/search:${{ github.sha }} -n basb-staging
          kubectl set image deployment/ai-service ai-service=basb/ai:${{ github.sha }} -n basb-staging
          # 等待部署完成
          kubectl rollout status deployment/api-service -n basb-staging
          kubectl rollout status deployment/knowledge-graph -n basb-staging
          kubectl rollout status deployment/document-processing -n basb-staging
          kubectl rollout status deployment/search -n basb-staging
          kubectl rollout status deployment/ai-service -n basb-staging
      - name: Run smoke tests
        run: |
          # 运行简单的健康检查
          curl -f https://staging-api.basb-system.com/health
          curl -f https://staging-kg.basb-system.com/health
          curl -f https://staging-docs.basb-system.com/health
          curl -f https://staging-search.basb-system.com/health
          curl -f https://staging-ai.basb-system.com/health

  # 部署到 Production 环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://basb-system.com
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name basb-production-cluster --region us-west-2
      - name: Deploy to Production
        run: |
          # 更新 Kubernetes 部署配置中的镜像标签
          kubectl set image deployment/api-service api-service=basb/api-service:${{ github.sha }} -n basb-production
          kubectl set image deployment/knowledge-graph knowledge-graph=basb/knowledge-graph:${{ github.sha }} -n basb-production
          kubectl set image deployment/document-processing document-processing=basb/document-processing:${{ github.sha }} -n basb-production
          kubectl set image deployment/search search=basb/search:${{ github.sha }} -n basb-production
          kubectl set image deployment/ai-service ai-service=basb/ai:${{ github.sha }} -n basb-production
          # 等待部署完成
          kubectl rollout status deployment/api-service -n basb-production
          kubectl rollout status deployment/knowledge-graph -n basb-production
          kubectl rollout status deployment/document-processing -n basb-production
          kubectl rollout status deployment/search -n basb-production
          kubectl rollout status deployment/ai-service -n basb-production
      - name: Run smoke tests
        run: |
          # 运行简单的健康检查
          curl -f https://api.basb-system.com/health
          curl -f https://kg.basb-system.com/health
          curl -f https://docs.basb-system.com/health
          curl -f https://search.basb-system.com/health
          curl -f https://ai.basb-system.com/health

  # 通知部署结果
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}