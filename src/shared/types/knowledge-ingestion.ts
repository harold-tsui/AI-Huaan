/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/capture/webpage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture Webpage Content
         * @description Captures the main content from a given URL, processes it, and stores it as a new knowledge item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description The URL of the webpage to capture.
                         * @example https://example.com/article
                         */
                        url: string;
                    };
                };
            };
            responses: {
                /** @description Successfully created a knowledge item from the webpage. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KnowledgeItemResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/capture/note": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture Text Note
         * @description Captures a text note and stores it as a new knowledge item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The content of the note.
                         * @example This is a quick note about API design.
                         */
                        content: string;
                        /**
                         * @description The format of the note content.
                         * @default markdown
                         * @enum {string}
                         */
                        format?: "markdown" | "plaintext";
                    };
                };
            };
            responses: {
                /** @description Successfully created a knowledge item from the note. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KnowledgeItemResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/capture/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture File
         * @description Uploads and captures a file, storing its content and metadata as a new knowledge item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description The file to be captured.
                         */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Successfully created a knowledge item from the file. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["KnowledgeItemResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        KnowledgeItem: {
            /**
             * Format: uuid
             * @description Unique identifier for the knowledge item.
             * @example d290f1ee-6c54-4b01-90e6-d701748f0851
             */
            id?: string;
            /**
             * @description The title of the knowledge item.
             * @example API Design Best Practices
             */
            title?: string;
            /**
             * @description Path to the stored content of the item.
             * @example /data/content/d290f1ee.md
             */
            content_path?: string;
            /**
             * Format: uri
             * @description The original source URL, if applicable.
             * @example https://example.com/article
             */
            source_url?: string;
            /**
             * Format: date-time
             * @description The timestamp when the item was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The timestamp when the item was last updated.
             */
            updated_at?: string;
        };
        KnowledgeItemResponse: {
            /** @default true */
            success: boolean;
            data?: components["schemas"]["KnowledgeItem"];
        };
        ErrorResponse: {
            /** @default false */
            success: boolean;
            error?: {
                /** @example validation_error */
                code?: string;
                /** @example Invalid request parameters */
                message?: string;
                details?: {
                    /** @example url */
                    field?: string;
                    /** @example URL is not valid */
                    message?: string;
                }[];
            };
        };
    };
    responses: {
        /** @description The server cannot or will not process the request due to something that is perceived to be a client error. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description The server has encountered a situation it doesn't know how to handle. */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
